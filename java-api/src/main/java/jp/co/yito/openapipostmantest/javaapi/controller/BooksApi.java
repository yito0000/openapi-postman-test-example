/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package jp.co.yito.openapipostmantest.javaapi.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import jp.co.yito.openapipostmantest.javaapi.controller.model.Book;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.SpringCodegen",
    date = "2020-11-25T02:40:19.045642+09:00[Asia/Tokyo]")
@Validated
@Api(value = "books", description = "the books API")
public interface BooksApi {

  /**
   * DELETE /books/{bookId} : 書籍削除API
   *
   * @param bookId 書籍ID (required)
   * @param apiKey (optional)
   * @return OK (status code 200) or 無効なAPI KEYです (status code 400) or 書籍が見つかりませんでした (status code
   *     404)
   */
  @ApiOperation(
      value = "書籍削除API",
      nickname = "booksBookIdDelete",
      notes = "",
      tags = {
        "書籍",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "無効なAPI KEYです"),
        @ApiResponse(code = 404, message = "書籍が見つかりませんでした")
      })
  @RequestMapping(value = "/books/{bookId}", method = RequestMethod.DELETE)
  ResponseEntity<Void> booksBookIdDelete(
      @ApiParam(value = "書籍ID", required = true) @PathVariable("bookId") Long bookId,
      @ApiParam(value = "") @RequestHeader(value = "api_key", required = false) String apiKey);

  /**
   * GET /books/{bookId} : 書籍詳細取得API IDに紐づく書籍を取得します
   *
   * @param bookId 書籍ID (required)
   * @return OK (status code 200) or 無効なIDです (status code 400) or 書籍が見つかりませんでした (status code 404)
   */
  @ApiOperation(
      value = "書籍詳細取得API",
      nickname = "booksBookIdGet",
      notes = "IDに紐づく書籍を取得します",
      response = Book.class,
      authorizations = {@Authorization(value = "api_key")},
      tags = {
        "書籍",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK", response = Book.class),
        @ApiResponse(code = 400, message = "無効なIDです"),
        @ApiResponse(code = 404, message = "書籍が見つかりませんでした")
      })
  @RequestMapping(
      value = "/books/{bookId}",
      produces = {"application/json"},
      method = RequestMethod.GET)
  ResponseEntity<Book> booksBookIdGet(
      @ApiParam(value = "書籍ID", required = true) @PathVariable("bookId") Long bookId);

  /**
   * GET /books/findByTags : タグ絞り込み検索API 指定した複数タグのいずれかを含む書籍リストを取得します
   *
   * @param tags (required)
   * @return OK (status code 200) or 無効なタグがあります (status code 400)
   * @deprecated
   */
  @ApiOperation(
      value = "タグ絞り込み検索API",
      nickname = "booksFindByTagsGet",
      notes = "指定した複数タグのいずれかを含む書籍リストを取得します",
      response = Book.class,
      responseContainer = "List",
      tags = {
        "書籍",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK", response = Book.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "無効なタグがあります")
      })
  @RequestMapping(
      value = "/books/findByTags",
      produces = {"application/json"},
      method = RequestMethod.GET)
  ResponseEntity<List<Book>> booksFindByTagsGet(
      @NotNull
          @ApiParam(value = "", required = true)
          @Valid
          @RequestParam(value = "tags", required = true)
          List<String> tags);

  /**
   * GET /books : 書籍一覧取得API 参照可能な書籍リストを取得します
   *
   * @return OK (status code 200) or 無効なAPI KEYです (status code 400)
   */
  @ApiOperation(
      value = "書籍一覧取得API",
      nickname = "booksGet",
      notes = "参照可能な書籍リストを取得します",
      response = Book.class,
      responseContainer = "List",
      authorizations = {@Authorization(value = "api_key")},
      tags = {
        "書籍",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK", response = Book.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "無効なAPI KEYです")
      })
  @RequestMapping(
      value = "/books",
      produces = {"application/json"},
      method = RequestMethod.GET)
  ResponseEntity<List<Book>> booksGet();

  /**
   * POST /books : 書籍登録API
   *
   * @param book 新しい書籍を登録する (required)
   * @return OK (status code 200) or リクエストパラメータに誤りがあります (status code 405)
   */
  @ApiOperation(
      value = "書籍登録API",
      nickname = "booksPost",
      notes = "",
      tags = {
        "書籍",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 405, message = "リクエストパラメータに誤りがあります")
      })
  @RequestMapping(
      value = "/books",
      consumes = {"application/json"},
      method = RequestMethod.POST)
  ResponseEntity<Void> booksPost(
      @ApiParam(value = "新しい書籍を登録する", required = true) @Valid @RequestBody Book book);

  /**
   * PUT /books : 書籍更新API
   *
   * @param book 書籍情報を更新します (required)
   * @return OK (status code 200) or 無効なIDです (status code 400) or 更新対象の書籍が見つかりません (status code 404)
   *     or リクエストパラメータに誤りがあります (status code 405)
   */
  @ApiOperation(
      value = "書籍更新API",
      nickname = "booksPut",
      notes = "",
      tags = {
        "書籍",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "無効なIDです"),
        @ApiResponse(code = 404, message = "更新対象の書籍が見つかりません"),
        @ApiResponse(code = 405, message = "リクエストパラメータに誤りがあります")
      })
  @RequestMapping(
      value = "/books",
      consumes = {"application/json"},
      method = RequestMethod.PUT)
  ResponseEntity<Void> booksPut(
      @ApiParam(value = "書籍情報を更新します", required = true) @Valid @RequestBody Book book);
}
